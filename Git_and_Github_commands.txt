About GIT and GITHUB

GIT - это система контроля версий. Это локальная (устанавливается на ПК) программа
которой можно управлять через терминал git bash.

GITHUB - удалённый сервис для работы и взаимодействия с вашим локальным.
Позваляет синхронизировать работу, скачивать удалённый репозитории в локальный, добавлять изменения итд.

========================================================
После установки GIT необходимо задать некоторые параметры
 		git config
git config --global user.name — Показывает имя пользователя
git config --global user.name 'my name' — Изменяет имя пользователя
git config --global user.gmail — Показывает email пользователя
git config --global user.email 'myname@gmail.com' — Изменяет email пользователя



========================================================

Основные команды  

git init  -    инициализация репозитория в текущем каталоге
git status  -  показывает текущий статус (состояние)
git add .  -   отслеживает ВСЕ папки и файлы, добавленные(изменённые) в каталоге
git add style.css  -  добавляет в отслеживание только файл style.css
		Чтобы отменить ком. git add .   -  git rm --cached style.css
git commit -m "my first commit"  -  создаёт коммит 
git push  -  отправит коммиты из локали на удалённый репозиторий
git clone -  клонирует файлы и папки из удалённого репозитория на локальный
git pull  -  забирает изменения из удалённого репозитория в локальный

===================================
В случае если необходимо удалить информацию которая ( случайно=) ) попала в удалённый репозиторий (например логины, токены, пароли...)
git reset --hard HEAD~1   -  ~1 означает -1 коммит
git log  -  проверяем что на локали всё удалено
cat index.html  -  покажет что есть в файле
 и теперь нужно быстро перезаписать всю историю в удаленном репозитории!
git push origin main --force    (--force - перезаписать историю/ main - название ветки)

===================================
About branch

git branch  -  покажет количество веток и в какой мы сейчас
git branch card_pay  -  создаст ветку с именем "card_pay"
git checkout -b card_pay  -  создаст и сразу переключится на ветку "card_pay"
git branch -D card_pay  -  удалит ветку "card_pay"
git checkout card_pay  -  просто переключит на ветку "card_pay"


                                                                                                                                                                                                                                                                                                                                              